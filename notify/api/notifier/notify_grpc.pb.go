// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: api/notifier/notify.proto

package notifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Notifier_Create_FullMethodName               = "/notifier.Notifier/Create"
	Notifier_GetUserNotifications_FullMethodName = "/notifier.Notifier/GetUserNotifications"
)

// NotifierClient is the client API for Notifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierClient interface {
	Create(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Nothing, error)
	GetUserNotifications(ctx context.Context, in *User, opts ...grpc.CallOption) (Notifier_GetUserNotificationsClient, error)
}

type notifierClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierClient(cc grpc.ClientConnInterface) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) Create(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Notifier_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierClient) GetUserNotifications(ctx context.Context, in *User, opts ...grpc.CallOption) (Notifier_GetUserNotificationsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notifier_ServiceDesc.Streams[0], Notifier_GetUserNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &notifierGetUserNotificationsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifier_GetUserNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type notifierGetUserNotificationsClient struct {
	grpc.ClientStream
}

func (x *notifierGetUserNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifierServer is the server API for Notifier service.
// All implementations must embed UnimplementedNotifierServer
// for forward compatibility
type NotifierServer interface {
	Create(context.Context, *Follow) (*Nothing, error)
	GetUserNotifications(*User, Notifier_GetUserNotificationsServer) error
	mustEmbedUnimplementedNotifierServer()
}

// UnimplementedNotifierServer must be embedded to have forward compatible implementations.
type UnimplementedNotifierServer struct {
}

func (UnimplementedNotifierServer) Create(context.Context, *Follow) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotifierServer) GetUserNotifications(*User, Notifier_GetUserNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedNotifierServer) mustEmbedUnimplementedNotifierServer() {}

// UnsafeNotifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierServer will
// result in compilation errors.
type UnsafeNotifierServer interface {
	mustEmbedUnimplementedNotifierServer()
}

func RegisterNotifierServer(s grpc.ServiceRegistrar, srv NotifierServer) {
	s.RegisterService(&Notifier_ServiceDesc, srv)
}

func _Notifier_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifier_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServer).Create(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifier_GetUserNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServer).GetUserNotifications(m, &notifierGetUserNotificationsServer{ServerStream: stream})
}

type Notifier_GetUserNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type notifierGetUserNotificationsServer struct {
	grpc.ServerStream
}

func (x *notifierGetUserNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// Notifier_ServiceDesc is the grpc.ServiceDesc for Notifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Notifier_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserNotifications",
			Handler:       _Notifier_GetUserNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/notifier/notify.proto",
}
